// <auto-generated />
using System;
using Infrastructure.Persistence.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Classes.AppDBClasses.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Apartment")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfChange")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("House")
                        .HasColumnType("integer");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Domain.Classes.AppDBClasses.AdultPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AdultPatients");
                });

            modelBuilder.Entity("Domain.Classes.AppDBClasses.AnthropometryOfPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfChange")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<double>("Hip")
                        .HasColumnType("double precision");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Waist")
                        .HasColumnType("double precision");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("AnthropometryOfPatients");
                });

            modelBuilder.Entity("Domain.Classes.AppDBClasses.BloodAnalysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("AmountOfCholesterol")
                        .HasColumnType("double precision");

                    b.Property<double>("AtherogenicityCoefficient")
                        .HasColumnType("double precision");

                    b.Property<double>("BMI")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("DateOfChange")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<double>("HDL")
                        .HasColumnType("double precision");

                    b.Property<double>("LDL")
                        .HasColumnType("double precision");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("VLDL")
                        .HasColumnType("double precision");

                    b.Property<double>("WHI")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PatientId");

                    b.ToTable("BloodAnalysises");
                });

            modelBuilder.Entity("Domain.Classes.AppDBClasses.CorrelationValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("AmountOfCholesterol")
                        .HasColumnType("double precision");

                    b.Property<double>("AtherogenicityCoefficient")
                        .HasColumnType("double precision");

                    b.Property<int>("CountOfData")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DrinkAlcohol")
                        .HasColumnType("double precision");

                    b.Property<double>("HDL")
                        .HasColumnType("double precision");

                    b.Property<double>("LDL")
                        .HasColumnType("double precision");

                    b.Property<double>("SmokeCigarettes")
                        .HasColumnType("double precision");

                    b.Property<double>("Sport")
                        .HasColumnType("double precision");

                    b.Property<double>("WHI")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("CorrelationValue");
                });

            modelBuilder.Entity("Domain.Classes.AppDBClasses.DataForFutureLearning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<double>("AmountOfCholesterol")
                        .HasColumnType("double precision");

                    b.Property<double>("AtherogenicityCoefficient")
                        .HasColumnType("double precision");

                    b.Property<bool>("DrinkAlcohol")
                        .HasColumnType("boolean");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("HDL")
                        .HasColumnType("double precision");

                    b.Property<int>("HasCVD")
                        .HasColumnType("integer");

                    b.Property<double>("LDL")
                        .HasColumnType("double precision");

                    b.Property<bool>("SmokeCigarettes")
                        .HasColumnType("boolean");

                    b.Property<bool>("Sport")
                        .HasColumnType("boolean");

                    b.Property<double>("WHI")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("DataForFutureLearning");
                });

            modelBuilder.Entity("Domain.Classes.AppDBClasses.DateForForecasting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<double>("AmountOfCholesterol")
                        .HasColumnType("double precision");

                    b.Property<double>("AtherogenicityCoefficient")
                        .HasColumnType("double precision");

                    b.Property<bool>("DrinkAlcohol")
                        .HasColumnType("boolean");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("HDL")
                        .HasColumnType("double precision");

                    b.Property<int>("HasCVD")
                        .HasColumnType("integer");

                    b.Property<double>("LDL")
                        .HasColumnType("double precision");

                    b.Property<bool>("SmokeCigarettes")
                        .HasColumnType("boolean");

                    b.Property<bool>("Sport")
                        .HasColumnType("boolean");

                    b.Property<double>("WHI")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("DateForForecasting");
                });

            modelBuilder.Entity("Domain.Classes.AppDBClasses.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsConfirm")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Domain.Classes.AppDBClasses.Lifestyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfChange")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DrinkAlcohol")
                        .HasColumnType("boolean");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("SmokeCigarettes")
                        .HasColumnType("boolean");

                    b.Property<bool>("Sport")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Lifestyles");
                });

            modelBuilder.Entity("Domain.Classes.AppDBClasses.MachineLearningModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountOfData")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModelData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MachineLearningModel");
                });

            modelBuilder.Entity("Domain.Classes.AppDBClasses.Passport", b =>
                {
                    b.Property<int>("AdultPatientId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AdultPatientId");

                    b.ToTable("Passports");
                });

            modelBuilder.Entity("Domain.Classes.AppDBClasses.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Domain.Classes.AppDBClasses.Address", b =>
                {
                    b.HasOne("Domain.Classes.AppDBClasses.AdultPatient", "AdultPatient")
                        .WithMany("Addresses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdultPatient");
                });

            modelBuilder.Entity("Domain.Classes.AppDBClasses.AnthropometryOfPatient", b =>
                {
                    b.HasOne("Domain.Classes.AppDBClasses.AdultPatient", "AdultPatient")
                        .WithMany("AnthropometryOfPatients")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdultPatient");
                });

            modelBuilder.Entity("Domain.Classes.AppDBClasses.BloodAnalysis", b =>
                {
                    b.HasOne("Domain.Classes.AppDBClasses.Employee", "Employee")
                        .WithMany("BloodAnalysises")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Classes.AppDBClasses.AdultPatient", "AdultPatient")
                        .WithMany("BloodAnalysises")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdultPatient");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Domain.Classes.AppDBClasses.Lifestyle", b =>
                {
                    b.HasOne("Domain.Classes.AppDBClasses.AdultPatient", "AdultPatient")
                        .WithMany("Lifestyles")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdultPatient");
                });

            modelBuilder.Entity("Domain.Classes.AppDBClasses.Passport", b =>
                {
                    b.HasOne("Domain.Classes.AppDBClasses.AdultPatient", "AdultPatient")
                        .WithOne("Passport")
                        .HasForeignKey("Domain.Classes.AppDBClasses.Passport", "AdultPatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdultPatient");
                });

            modelBuilder.Entity("Domain.Classes.AppDBClasses.RefreshToken", b =>
                {
                    b.HasOne("Domain.Classes.AppDBClasses.Employee", "Employee")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Domain.Classes.AppDBClasses.AdultPatient", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("AnthropometryOfPatients");

                    b.Navigation("BloodAnalysises");

                    b.Navigation("Lifestyles");

                    b.Navigation("Passport")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Classes.AppDBClasses.Employee", b =>
                {
                    b.Navigation("BloodAnalysises");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
